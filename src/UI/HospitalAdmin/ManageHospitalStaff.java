/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.HospitalAdmin;

import EcoSystem.Account.Account;
import EcoSystem.Account.AccountDirectory;
import EcoSystem.AmbulanceDriver.AmbulanceDriver;
import EcoSystem.AmbulanceDriver.AmbulanceDriverDirectory;
import EcoSystem.Doctor.Doctor;
import EcoSystem.Doctor.DoctorDirectory;
import EcoSystem.EcoSystem;
import EcoSystem.Hospital.HospitalAdmin;
import EcoSystem.LabAssistant.LabAssistant;
import EcoSystem.LabAssistant.LabAssistantDirectory;
import EcoSystem.Reception.Reception;
import EcoSystem.Reception.ReceptionDirectory;
import EcoSystem.Role.AccountantRole;
import EcoSystem.Role.AmbulanceDriverRole;
import EcoSystem.Role.DoctorRole;
import EcoSystem.Role.LabExaminerRole;
import EcoSystem.Role.ReceptionistRole;
import EcoSystem.UserAccount.UserAccount;
import EcoSystem.UserAccount.UserAccountDirectory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shriyadikshith
 */
public class ManageHospitalStaff extends javax.swing.JPanel {

    /**
     * Creates new form ManageHospitalStaff
     */
    
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccountDirectory userAccountDirectory;
    UserAccount userAccount;
    private int index = -1;
    HospitalAdmin admin = new HospitalAdmin();
    public ManageHospitalStaff(JPanel userProcessContainer,EcoSystem ecosystem,UserAccount userAccount) {
        initComponents();
        creatingListenerForModification();
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        this.userAccount = userAccount;
        for(HospitalAdmin admin1 : ecosystem.getHospitalDirectory().getHospitalList()){
            if(admin1.equals(userAccount)){
                admin = admin1;
            }
        }
        populateTable();
        fillRstStaff();
        fillRstDocType();
    }
    
    private void fillRstDocType(){
        comboDoctor.addItem("Paediatrician");
        comboDoctor.addItem("Physician");
        comboDoctor.addItem("Neurologist");
        comboDoctor.addItem("Internist");
        comboDoctor.addItem("Psychiatrists");
        comboDoctor.addItem("Gynaecologist");
        comboDoctor.addItem("Surgeon");
        comboDoctor.addItem("Dermatologist");
        comboDoctor.addItem("Opthalmologist");
    }
    
    private void fillRstStaff(){
        comboStaff.addItem("Doctor");
        comboStaff.addItem("Lab");
        comboStaff.addItem("Ambulance");
        comboStaff.addItem("Reception");
        comboStaff.addItem("Account");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnback = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        enterpriseLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        enterpriseLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        staff = new javax.swing.JTextField();
        txtpswrd = new javax.swing.JTextField();
        comboStaff = new javax.swing.JComboBox<>();
        comboDoctor = new javax.swing.JComboBox<>();
        availdoc = new javax.swing.JTextField();
        btnaddstaff = new javax.swing.JButton();

        setBackground(new java.awt.Color(166, 203, 230));

        btnback.setText("BACK");

        jLabel1.setBackground(new java.awt.Color(166, 206, 55));
        jLabel1.setFont(new java.awt.Font("Garamond", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("MANAGE HOSPITAL STAFF");

        tblMenu.setFont(new java.awt.Font("Garamond", 0, 14)); // NOI18N
        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STAFF NAME", "STAFF PASSWORD", "STAFF TYPE", "DOCTOR AVAILABILITY", "DOCTOR TYPE", "ADDRESS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMenu);

        jLabel2.setBackground(new java.awt.Color(166, 206, 55));
        jLabel2.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Staff Name");

        enterpriseLabel1.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        enterpriseLabel1.setForeground(new java.awt.Color(0, 51, 102));
        enterpriseLabel1.setText("Staff Type");

        jLabel4.setBackground(new java.awt.Color(166, 206, 55));
        jLabel4.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Password");

        enterpriseLabel2.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        enterpriseLabel2.setForeground(new java.awt.Color(0, 51, 102));
        enterpriseLabel2.setText("Doctor Type");

        jLabel5.setBackground(new java.awt.Color(166, 206, 55));
        jLabel5.setFont(new java.awt.Font("Garamond", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 102));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Doctor Availability");

        jLabel3.setFont(new java.awt.Font("Garamond", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 102));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("***** Fill the below details only for Doctor *****");

        comboStaff.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnaddstaff.setText("ADD STAFF");
        btnaddstaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnaddstaffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(71, 71, 71)
                                        .addComponent(jLabel2)
                                        .addGap(60, 60, 60)
                                        .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(60, 60, 60)
                                                .addComponent(enterpriseLabel2))
                                            .addComponent(jLabel5))
                                        .addGap(60, 60, 60)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(comboDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(availdoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnaddstaff, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(79, 79, 79)
                                                .addComponent(enterpriseLabel1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(84, 84, 84)
                                                .addComponent(jLabel4)))
                                        .addGap(59, 59, 59)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtpswrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(comboStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 746, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {availdoc, staff, txtpswrd});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnback, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(staff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel1)
                    .addComponent(comboStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtpswrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel2)
                    .addComponent(comboDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(availdoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnaddstaff, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnaddstaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnaddstaffActionPerformed
        // TODO add your handling code here:
        if (staff.getText().isEmpty() ) {
            JOptionPane.showMessageDialog(null, "Enter all fields");
            return;
        }
        String choice = comboStaff.getSelectedItem().toString();
        if(ecosystem.getUserAccountDirectory().checkUsernameUnique(staff.getText())){
            if(choice.equalsIgnoreCase("Doctor")){
                Doctor hospitalStaff = new Doctor();
                       
                hospitalStaff.setName(staff.getText());
                hospitalStaff.setType(choice);
                hospitalStaff.setDocType(comboDoctor.getSelectedItem().toString());
                hospitalStaff.setTime(availdoc.getText());
                hospitalStaff.setUsername(staff.getText());
                hospitalStaff.setPassword(txtpswrd.getText());
                hospitalStaff.setRole(new DoctorRole());
 
                ecosystem.getUserAccountDirectory().addUserAccount(hospitalStaff);
                ecosystem.getDoctorDirectory().addDoctor(hospitalStaff);
            
                populateTable();
                staff.setText("");
                txtpswrd.setText("");
                
                availdoc.setText("");
            }
            if(choice.equalsIgnoreCase("Reception")){
                Reception hospitalStaff = new Reception();
                
                hospitalStaff.setName(staff.getText());
                hospitalStaff.setType(choice);
                hospitalStaff.setUsername(staff.getText());
                hospitalStaff.setPassword(txtpswrd.getText());
                hospitalStaff.setRole(new ReceptionistRole());
                ecosystem.getUserAccountDirectory().addUserAccount(hospitalStaff);
                ecosystem.getReceptionDirectory().addReception(hospitalStaff);
            
                populateTable();
                staff.setText("");
                txtpswrd.setText("");
                
                availdoc.setText("");
            }
            if(choice.equalsIgnoreCase("Ambulance")){
                AmbulanceDriver hospitalStaff = new AmbulanceDriver();
                
                hospitalStaff.setAmbulanceDriverName(staff.getText());
                hospitalStaff.setType(choice);
                hospitalStaff.setUsername(staff.getText());
                hospitalStaff.setPassword(txtpswrd.getText());
                hospitalStaff.setRole(new AmbulanceDriverRole());
                ecosystem.getUserAccountDirectory().addUserAccount(hospitalStaff);
                ecosystem.getAmbulanceDirectory().addAmbulanceDriver(hospitalStaff);
            
                populateTable();
                staff.setText("");
                txtpswrd.setText("");
                
                availdoc.setText("");
            }
            if(choice.equalsIgnoreCase("Lab")){
                LabAssistant hospitalStaff = new LabAssistant();
                
                hospitalStaff.setLabAssistantName(staff.getText());
                hospitalStaff.setType(choice);
                hospitalStaff.setUsername(staff.getText());
                hospitalStaff.setPassword(txtpswrd.getText());
                hospitalStaff.setRole(new LabExaminerRole());
                ecosystem.getUserAccountDirectory().addUserAccount(hospitalStaff);
                ecosystem.getLabAssistantDirectory().addLabAssistant(hospitalStaff);
            
                populateTable();
                staff.setText("");
                txtpswrd.setText("");
                
                availdoc.setText("");
            }
            if(choice.equalsIgnoreCase("Account")){
                Account hospitalStaff = new Account();
                hospitalStaff.setAccountName(staff.getText());
                hospitalStaff.setType(choice);
                hospitalStaff.setUsername(staff.getText());
                hospitalStaff.setPassword(txtpswrd.getText());
                hospitalStaff.setRole(new AccountantRole());
                ecosystem.getUserAccountDirectory().addUserAccount(hospitalStaff);
                ecosystem.getAccountDirectory().addAccount(hospitalStaff);
            
                populateTable();
                staff.setText("");
                txtpswrd.setText("");
                
                availdoc.setText("");
            }
         }

        else{
            JOptionPane.showMessageDialog(null, "Username " + staff.getText() + " exists");
         }
    }//GEN-LAST:event_btnaddstaffActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField availdoc;
    private javax.swing.JButton btnaddstaff;
    private javax.swing.JButton btnback;
    private javax.swing.JComboBox<String> comboDoctor;
    private javax.swing.JComboBox<String> comboStaff;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JLabel enterpriseLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField staff;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTextField txtpswrd;
    // End of variables declaration//GEN-END:variables

private void populateTable() {

            DoctorDirectory doctorDirectory = ecosystem.getDoctorDirectory();
            AccountDirectory accountDirectory = ecosystem.getAccountDirectory();
            LabAssistantDirectory labAssistantDirectory = ecosystem.getLabAssistantDirectory();
            AmbulanceDriverDirectory ambulanceDriverDirectory = ecosystem.getAmbulanceDirectory();
            ReceptionDirectory receptionDirectory = ecosystem.getReceptionDirectory();
            DefaultTableModel model = (DefaultTableModel) tblMenu.getModel();
            
            model.setRowCount(0);
            for (Doctor doctor : doctorDirectory.getDoctorList()) {

                        Object[] row = new Object[6];
                        row[0] = doctor.getUsername();
                        row[1] = doctor.getPassword();
                        row[2] = doctor.getType();
                        row[3] = doctor.getTime();
                        row[4] = doctor.getDocType();
                        row[5] = admin.getAddress();
                        model.addRow(row);
                    
            }
            for (Account account : accountDirectory.getAccountList()) {

                        Object[] row = new Object[6];
                        row[0] = account.getUsername();
                        row[1] = account.getPassword();
                        row[2] = account.getType();
                        row[5] = admin.getAddress();
                   
                        model.addRow(row);
                    
            }
            for (LabAssistant labAssistant : labAssistantDirectory.getLabAssistantNameList()) {

                        Object[] row = new Object[6];
                        row[0] = labAssistant.getUsername();
                        row[1] = labAssistant.getPassword();
                        row[2] = labAssistant.getType();
                        row[5] = admin.getAddress();
                        model.addRow(row);
                    
            }
            for (AmbulanceDriver ambDriver : ambulanceDriverDirectory.getAmbulanceDriverList()) {

                        Object[] row = new Object[6];
                        row[0] = ambDriver.getUsername();
                        row[1] = ambDriver.getPassword();
                        row[2] = ambDriver.getType();
                        row[5] = admin.getAddress();
                        model.addRow(row);
                    
            }   
            for (Reception reception : receptionDirectory.getReceptionList()) {

                        Object[] row = new Object[6];
                        row[0] = reception.getUsername();
                        row[1] = reception.getPassword();
                        row[2] = reception.getType();
                        row[5] = admin.getAddress();
                        model.addRow(row);
                    
            }
    }
        
    private void creatingListenerForModification() {
       tblMenu.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
        public void valueChanged(ListSelectionEvent event) {
           int selectedRow = tblMenu.getSelectedRow();
             if (selectedRow >= 0) {
                  Doctor doctor = (Doctor) tblMenu.getValueAt(selectedRow, 0);
                  Account account = (Account) tblMenu.getValueAt(selectedRow, 0);
                  AmbulanceDriver ambDriver = (AmbulanceDriver) tblMenu.getValueAt(selectedRow, 0);
                  Reception reception = (Reception) tblMenu.getValueAt(selectedRow, 0);
                  LabAssistant labAssistant = (LabAssistant) tblMenu.getValueAt(selectedRow, 0);
                 if(doctor!=null || account!=null || ambDriver!=null || reception!=null || labAssistant!=null){
                     display(doctor,account,ambDriver,reception,labAssistant);
                 }
             }
        }
    });
    }
    
    private void display(Doctor doctor,Account account,AmbulanceDriver ambDriver,Reception reception,LabAssistant labAssistant) {
        
        if(doctor != null) {
        staff.setText(doctor.getUsername());
        txtpswrd.setText(doctor.getPassword());
        availdoc.setText(doctor.getTime());
        }
        if(account != null){
        staff.setText(account.getUsername());
        txtpswrd.setText(account.getPassword());
        }
        if(ambDriver != null){
        staff.setText(ambDriver.getUsername());
        txtpswrd.setText(ambDriver.getPassword());
        }
        if(reception != null){
        staff.setText(reception.getUsername());
        txtpswrd.setText(reception.getPassword());
        }
        if(labAssistant != null){
        staff.setText(labAssistant.getUsername());
        txtpswrd.setText(labAssistant.getPassword());
        }
    }

}
